{
	"info": {
		"_postman_id": "40bd5758-4cf3-4866-9b71-724056c08c91",
		"name": "assignment2",
		"description": "This collection tests the API specification given for Assignment 2.  \nIn order to run this collection, use the environment file assignment2.environment.json. That environment file has some predefined variables needed by the tests in this collection. There is only one variable in that file that you need to set when running your collection\n\napp_url\n\n- Set the value of this variable to the URL of your app. E.g., when running locally set it to [http://127.0.0.1:8080](http://127.0.0.1:8080). When running the app on GCP. set it to the URL of your app on GCP, e.g., [https://a2-chaudhrn-osu.uc.r.appspot.com](https://a2-chaudhrn-osu.uc.r.appspot.com)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9037348"
	},
	"item": [
		{
			"name": "1. Create a Business (6 pts)",
			"item": [
				{
					"name": "1. add business 201 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_1\", pm.response.json()[\"id\"]);",
									"",
									"let points = 0; ",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"    points += 0.5",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mandola's\");",
									"    pm.expect(pm.response.json()[\"street_address\"]).to.eq(\"4900 N Lamar Blvd\");",
									"    pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(pm.response.json()[\"zip_code\"]).to.eq(78751);",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");",
									"    pm.expect(pm.response.json()[\"id\"]).to.be.a('number')",
									"    points += 1",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5",
									"});",
									"",
									"console.log('******* Create a business Test 1 points = ' + points);",
									"console.log('******* Create a business Tests current points = ' + points);",
									"pm.environment.set(\"points_business_create\", points);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"points_business_crud\", 0);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. add business with missing attributes 400 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"400 status code\", function () {",
									"    pm.response.to.have.status(400);",
									"    points += 0.75",
									"});",
									"",
									"pm.test(\"400 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is missing at least one of the required attributes\");",
									"     points += 0.75",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5",
									"});",
									"",
									"",
									"console.log('******* Create a business Test 2 points = ' + points);",
									"let points_business_create = pm.environment.get(\"points_business_create\") + points",
									"console.log('******* Create a business Tests current points = ' + points_business_create);",
									"pm.environment.set(\"points_business_create\", points_business_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Torchy Tacos\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. add second business 201 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.environment.set(\"business_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"    points += 0.5",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mandola's\");",
									"    pm.expect(pm.response.json()[\"street_address\"]).to.eq(\"321 South Mopac\");",
									"    pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(pm.response.json()[\"zip_code\"]).to.eq(78751);",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");",
									"    pm.expect(pm.response.json()[\"id\"]).to.be.a('number')",
									"    points += 1",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5",
									"});",
									"",
									"console.log('******* Create a business Test 3 points = ' + points);",
									"let points_business_create = pm.environment.get(\"points_business_create\") + points",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* Create a business Tests Total points = ' + points_business_create);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_business_create\", points_business_create);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Get a business (6 pts)",
			"item": [
				{
					"name": "1. get business 200 (4 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.5",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mandola's\");",
									"    pm.expect(pm.response.json()[\"street_address\"]).to.eq(\"4900 N Lamar Blvd\");",
									"    pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(pm.response.json()[\"zip_code\"]).to.eq(78751);",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");",
									"    pm.expect(pm.response.json()[\"id\"]).to.be.a('number')",
									"        pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get('business_id_1'))",
									"    points += 3",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5",
									"});",
									"",
									"",
									"console.log('******* Get a business Test 1 points = ' + points);",
									"console.log('******* Get a business Tests current points = ' + points);",
									"pm.environment.set(\"points_business_get\", points);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. get business with invalid id 404 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    points += 0.5",
									"});",
									"",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No business with this business_id exists\");",
									"     points += 1",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5",
									"});",
									"",
									"console.log('******* Get a business Test 2 points = ' + points);",
									"let points_business_get = pm.environment.get(\"points_business_get\") + points",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* Get a business Tests Total points = ' + points_business_get);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_business_get\", points_business_get);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{invalid_business_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{invalid_business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. List all businesses (6 pts)",
			"item": [
				{
					"name": "1. get all businesses 200 (6 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.5;",
									"});",
									"",
									"",
									"const respJSON = pm.response.json();",
									"",
									"pm.test(\"At least two businesses exists\", function(){",
									"   pm.expect(Object.keys(respJSON).length).to.be.at.least(2);",
									"   points += 2;",
									"});",
									"",
									"pm.test(\"All business have the required properties\", function(){",
									"    let count_businesses = Object.keys(pm.response.json()).length;",
									"    pm.expect(respJSON.filter(x => Object.keys(x).includes('id')).length).to.equal(count_businesses);",
									"    pm.expect(respJSON.filter(x => Object.keys(x).includes('city')).length).to.equal(count_businesses);",
									"    pm.expect(respJSON.filter(x => Object.keys(x).includes('name')).length).to.equal(count_businesses);",
									"    pm.expect(respJSON.filter(x => Object.keys(x).includes('owner_id')).length).to.equal(count_businesses);",
									"    pm.expect(respJSON.filter(x => Object.keys(x).includes('state')).length).to.equal(count_businesses);",
									"    pm.expect(respJSON.filter(x => Object.keys(x).includes('street_address')).length).to.equal(count_businesses);",
									"    pm.expect(respJSON.filter(x => Object.keys(x).includes('zip_code')).length).to.equal(count_businesses);",
									"    points += 3;",
									"});",
									"",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* List all businesses Test 1 points = ' + points);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* List all businesses Tests Total points = ' + points);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_business_list_all\", points);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Edit a business (6 pts)",
			"item": [
				{
					"name": "1. edit business 200 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mandola's Italian\");",
									"    pm.expect(pm.response.json()[\"street_address\"]).to.eq(\"4900 N Lamar Blvd\");",
									"    pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(pm.response.json()[\"zip_code\"]).to.eq(78751);",
									"    points += 1",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5",
									"});",
									"",
									"console.log('******* Edit a business Test 1 points = ' + points);",
									"console.log('******* Edit a business Tests current points = ' + points);",
									"pm.environment.set(\"points_business_edit\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's Italian\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. get business after update 200 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.5;",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mandola's Italian\");",
									"    pm.expect(pm.response.json()[\"street_address\"]).to.eq(\"4900 N Lamar Blvd\");",
									"    pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(pm.response.json()[\"zip_code\"]).to.eq(78751);",
									"    points += 1;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* Edit a business Test 2 points = ' + points);",
									"let points_business_edit = pm.environment.get(\"points_business_edit\") + points",
									"console.log('******* Edit a business Tests current points = ' + points_business_edit);",
									"pm.environment.set(\"points_business_edit\", points_business_edit);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. edit business with missing attributes 400 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"400 status code\", function () {",
									"    pm.response.to.have.status(400);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"400 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is missing at least one of the required attributes\");",
									"     points += 0.25;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"console.log('******* Edit a business Test 3 points = ' + points);",
									"let points_business_edit = pm.environment.get(\"points_business_edit\") + points",
									"console.log('******* Edit a business Tests current points = ' + points_business_edit);",
									"pm.environment.set(\"points_business_edit\", points_business_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": 123,\r\n  \"name\": \"Torchy Tacos\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. edit business with invalid id 404 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    points += 0.5;",
									"});",
									"",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No business with this business_id exists\");",
									"     points += 0.25;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"console.log('******* Edit a business Test 4 points = ' + points);",
									"let points_business_edit = pm.environment.get(\"points_business_edit\") + points",
									"console.log('******* Edit a business Tests Total points = ' + points_business_edit);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* Edit a business Tests Total points = ' + points_business_edit);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_business_edit\", points_business_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's Italian\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}\r\n"
						},
						"url": {
							"raw": "{{app_url}}/businesses/{{invalid_business_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{invalid_business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Delete a business (6 pts)",
			"item": [
				{
					"name": "1. delete business 204 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"    points += 2;",
									"});",
									"",
									"console.log('******* Delete a business Test 1 points = ' + points);",
									"console.log('******* Delete a business Tests current points = ' + points);",
									"pm.environment.set(\"points_business_delete\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. delete business just deleted 404 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    points += 1;",
									"});",
									"",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No business with this business_id exists\");",
									"     points += 1;",
									"});",
									"",
									"",
									"console.log('******* Delete a business Test 2 points = ' + points);",
									"let points_business_delete = pm.environment.get(\"points_business_delete\") + points",
									"console.log('******* Delete a business Tests current points = ' + points_business_delete);",
									"pm.environment.set(\"points_business_delete\", points_business_delete);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. delete second business 204 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"    points += 2;",
									"});",
									"",
									"",
									"console.log('******* Delete a business Test 3 points = ' + points);",
									"let points_business_delete = pm.environment.get(\"points_business_delete\") + points",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* Deletee a business Tests Total points = ' + points_business_delete);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_business_delete\", points_business_delete);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6. List businesses for owner (6 pts)",
			"item": [
				{
					"name": "1. add business for owner 1 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_1\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mandola's\");",
									"    pm.expect(pm.response.json()[\"street_address\"]).to.eq(\"4900 N Lamar Blvd\");",
									"    pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(pm.response.json()[\"zip_code\"]).to.eq(78751);",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. add 2nd business for owner 1 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mandola's\");",
									"    pm.expect(pm.response.json()[\"street_address\"]).to.eq(\"321 South Mopac\");",
									"    pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(pm.response.json()[\"zip_code\"]).to.eq(78751);",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. add business for owner 2 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_3\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_2\")));",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mandola's\");",
									"    pm.expect(pm.response.json()[\"street_address\"]).to.eq(\"321 South Mopac\");",
									"    pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(pm.response.json()[\"zip_code\"]).to.eq(78751);",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_2}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. get businesses and set count (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_count\", ",
									"    pm.response.json().length);",
									"",
									"pm.environment.set(\"owner_1_business_count\", ",
									"    pm.response.json().filter((b) => b.owner_id === parseInt(pm.environment.get(\"owner_id_1\"))).length);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. get all businesses for owner 1 (6 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0;\r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.5;\r",
									"}); \r",
									"\r",
									"pm.test(\"Count must equal the value of businesses of this owner set by previous request\", function(){\r",
									"   pm.expect(pm.response.json().length).to.equal(pm.environment.get(\"owner_1_business_count\"));\r",
									"   points += 4;\r",
									"});\r",
									"\r",
									"pm.test(\"Count of total businesses must be at least 1 more than businesses of this owner\", function(){\r",
									"   pm.expect(pm.response.json().length).to.be.lessThan(pm.environment.get(\"business_count\"));\r",
									"   points += 1;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"\r",
									"console.log('******* List businesses for owner Test 5 points = ' + points);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log('******* List businesses for owner total points = ' + points);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"pm.environment.set(\"points_list_businesses\", points);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/owners/{{owner_id_1}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"owners",
								"{{owner_id_1}}",
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. delete business 204 (0 points)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. delete 2nd business 204 (0 points)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. delete 3rd business 204 (0 points)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_3}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7. Create a review (8 pts)",
			"item": [
				{
					"name": "1. add business  201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Torchy Tacos\");",
									"    pm.expect(pm.response.json()[\"street_address\"]).to.eq(\"5100 Burnet Road\");",
									"    pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(pm.response.json()[\"zip_code\"]).to.eq(78703);",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"points_review_crud\", 0);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Torchy Tacos\",\r\n  \"street_address\": \"5100 Burnet Road\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78703\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. add review 201 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.environment.set(\"reivew_id_1\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"    points += 0.5;",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_1\")));",
									"    pm.expect(pm.response.json()[\"business_id\"]).to.eq(",
									"        pm.environment.get(\"business_id_2\"));",
									"    pm.expect(pm.response.json()[\"stars\"]).to.eq(4);",
									"    pm.expect(pm.response.json()[\"review_text\"]).to.eq(\"Excellent tacos!\");",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");",
									"    pm.expect(pm.response.json()[\"id\"]).to.be.a('number')",
									"    points += 1;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* Create a review Test 2 points = ' + points);",
									"console.log('******* Create a review Tests current points = ' + points);",
									"pm.environment.set(\"points_review_create\", points);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_1}},\r\n  \"business_id\": {{business_id_2}},\r\n  \"stars\": 4,\r\n  \"review_text\": \"Excellent tacos!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. add review again 409 (1.5 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"409 status code\", function () {",
									"    pm.response.to.have.status(409);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"409 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You have already submitted a review for this business. You can update your previous review, or delete it and submit a new review\");",
									"     points += 0.5;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* Create a review Test 3 points = ' + points);",
									"let points_review_create = pm.environment.get(\"points_review_create\") + points",
									"console.log('******* Create a review Tests current points = ' + points_review_create);",
									"pm.environment.set(\"points_review_create\", points_review_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_1}},\r\n  \"business_id\": {{business_id_2}},\r\n  \"stars\": 4,\r\n  \"review_text\": \"Excellent tacos!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. add review 400 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"400 status code\", function () {",
									"    pm.response.to.have.status(400);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"400 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is missing at least one of the required attributes\");",
									"     points += 0.25;",
									"});",
									"",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"console.log('******* Create a review Test 4 points = ' + points);",
									"let points_review_create = pm.environment.get(\"points_review_create\") + points",
									"console.log('******* Create a review Tests current points = ' + points_review_create);",
									"pm.environment.set(\"points_review_create\", points_review_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_1}},\r\n  \"business_id\": {{business_id_2}},\r\n  \"review_text\": \"Excellent tacos!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. add review invalid business 404 (1.5 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"404 status code\", function () {",
									"    pm.response.to.have.status(404);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No business with this business_id exists\");",
									"     points += 0.5;",
									"});",
									"",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* Create a review Test 5 points = ' + points);",
									"let points_review_create = pm.environment.get(\"points_review_create\") + points",
									"console.log('******* Create a review Tests current points = ' + points_review_create);",
									"pm.environment.set(\"points_review_create\", points_review_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_1}},\r\n  \"business_id\": {{invalid_business_id}},\r\n  \"stars\": 4,\r\n  \"review_text\": \"Excellent tacos!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. add review 2 no review_text 201 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.environment.set(\"reivew_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"    points += 0.5;",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_2\")));",
									"    pm.expect(pm.response.json()[\"business_id\"]).to.eq(",
									"        pm.environment.get(\"business_id_2\"));",
									"    pm.expect(pm.response.json()[\"stars\"]).to.eq(3);",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");",
									"    pm.expect(pm.response.json()[\"id\"]).to.be.a('number')",
									"    points += 1;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* Create a review Test 6 points = ' + points);",
									"let points_review_create = pm.environment.get(\"points_review_create\") + points",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* Create a review Tests Total points = ' + points_review_create);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_review_create\", points_review_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_2}},\r\n  \"business_id\": {{business_id_2}},\r\n  \"stars\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "8. Get a review (5 pts)",
			"item": [
				{
					"name": "1. get review 200 (3 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(pm.response.json()[\"user_id\"]).to.eq(\r",
									"        parseInt(pm.environment.get(\"user_id_1\")));\r",
									"    pm.expect(pm.response.json()[\"business_id\"]).to.eq(\r",
									"        pm.environment.get(\"business_id_2\"));\r",
									"    pm.expect(pm.response.json()[\"stars\"]).to.eq(4);\r",
									"    pm.expect(pm.response.json()[\"review_text\"]).to.eq(\"Excellent tacos!\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");\r",
									"    pm.expect(pm.response.json()[\"id\"]).to.be.a('number')\r",
									"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get('reivew_id_1'))\r",
									"    points += 2;\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"console.log('******* Get a review Test 1 points = ' + points);\r",
									"console.log('******* Get a review Tests current points = ' + points);\r",
									"pm.environment.set(\"points_review_get\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{reivew_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{reivew_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. get review 404 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"pm.test(\"404 status code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"404 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No review with this review_id exists\");\r",
									"     points += 0.25;\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.25;\r",
									"});\r",
									"\r",
									"console.log('******* Get a review Test 2 points = ' + points);\r",
									"let points_review_get = pm.environment.get(\"points_review_get\") + points\r",
									"console.log('******* Get a review Tests current points = ' + points_review_get);\r",
									"pm.environment.set(\"points_review_get\", points_review_get);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{invalid_review_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{invalid_review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. get second review 200 (1 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"console.log('******* Get a review Test 3 points = ' + points);\r",
									"let points_review_get = pm.environment.get(\"points_review_get\") + points\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log('******* Get a review Tests Total points = ' + points_review_get);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"pm.environment.set(\"points_review_get\", points_review_get);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{reivew_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{reivew_id_2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "9. Edit a review (6 pts)",
			"item": [
				{
					"name": "1. edit review (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.25;",
									"});",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_1\")));",
									"    pm.expect(pm.response.json()[\"business_id\"]).to.eq(",
									"        pm.environment.get(\"business_id_2\"));",
									"    pm.expect(pm.response.json()[\"stars\"]).to.eq(5);",
									"    pm.expect(pm.response.json()[\"review_text\"]).to.eq(\"Queso is the best.\");",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"console.log('******* Edit a review Test 1 points = ' + points);",
									"console.log('******* Edit a review Tests current points = ' + points);",
									"pm.environment.set(\"points_review_edit\", points);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stars\": 5,\r\n  \"review_text\": \"Queso is the best.\"\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/reviews/{{reivew_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{reivew_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. get review after update 200 (1.5 points)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.25;",
									"});",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_1\")));",
									"    pm.expect(pm.response.json()[\"business_id\"]).to.eq(",
									"        pm.environment.get(\"business_id_2\"));",
									"    pm.expect(pm.response.json()[\"stars\"]).to.eq(5);",
									"    pm.expect(pm.response.json()[\"review_text\"]).to.eq(\"Queso is the best.\");",
									"    points += 1;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"console.log('******* Edit a review Test 2 points = ' + points);",
									"let points_review_edit = pm.environment.get(\"points_review_edit\") + points",
									"console.log('******* Edit a review Tests current points = ' + points_review_edit);",
									"pm.environment.set(\"points_review_edit\", points_review_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{reivew_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{reivew_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. edit review with missing attribute 400 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"400 status code\", function () {",
									"    pm.response.to.have.status(400);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"400 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is missing at least one of the required attributes\");",
									"     points += 0.25;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"console.log('******* Edit a review Test 3 points = ' + points);",
									"let points_review_edit = pm.environment.get(\"points_review_edit\") + points",
									"console.log('******* Edit a review Tests current points = ' + points_review_edit);",
									"pm.environment.set(\"points_review_edit\", points_review_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"review_text\": \"Queso is the best.\"\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/reviews/{{reivew_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{reivew_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. edit review with invalid id 404 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    points += 0.5;",
									"});",
									"",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No review with this review_id exists\");",
									"     points += 0.25;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"",
									"console.log('******* Edit a review Test 4 points = ' + points);",
									"let points_review_edit = pm.environment.get(\"points_review_edit\") + points",
									"console.log('******* Edit a review Tests current points = ' + points_review_edit);",
									"pm.environment.set(\"points_review_edit\", points_review_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stars\": 5,\r\n  \"review_text\": \"Queso is the best.\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{app_url}}/reviews/{{invalid_review_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{invalid_review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. edit review stars only (1.5 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_1\")));",
									"    pm.expect(pm.response.json()[\"business_id\"]).to.eq(",
									"        pm.environment.get(\"business_id_2\"));",
									"    pm.expect(pm.response.json()[\"stars\"]).to.eq(4);",
									"    pm.expect(pm.response.json()[\"review_text\"]).to.eq(\"Queso is the best.\");",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* Edit a review Test 5 points = ' + points);",
									"let points_review_edit = pm.environment.get(\"points_review_edit\") + points",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* Edit a review Tests Total points = ' + points_review_edit);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_review_edit\", points_review_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stars\": 4\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/reviews/{{reivew_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{reivew_id_1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "10. Delete a review (5 pts)",
			"item": [
				{
					"name": "1. delete review 204 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"    points += 2;",
									"});",
									"",
									"console.log('******* Delete a review Test 1 points = ' + points);",
									"console.log('******* Delete a review Tests current points = ' + points);",
									"pm.environment.set(\"points_review_delete\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{reivew_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{reivew_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. delete review just deleted 404 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No review with this review_id exists\");",
									"     points += 0.5;",
									"});",
									"",
									"console.log('******* Delete a review Test 2 points = ' + points);",
									"let points_review_delete = pm.environment.get(\"points_review_delete\") + points",
									"console.log('******* Delete a review Tests current points = ' + points_review_delete);",
									"pm.environment.set(\"points_review_delete\", points_review_delete);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{reivew_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{reivew_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. delete business 204 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. get second review business deleted 404 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"pm.test(\"404 status code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    points += 1;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"404 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No review with this review_id exists\");\r",
									"     points += 0.5;\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"console.log('******* Delete a review Test 4 points = ' + points);\r",
									"let points_review_delete = pm.environment.get(\"points_review_delete\") + points\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log('******* Delete a review Tests Total points = ' + points_review_delete);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"pm.environment.set(\"points_review_delete\", points_review_delete);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{reivew_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{reivew_id_2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "11. List all reviews for user (6 pts)",
			"item": [
				{
					"name": "1. add business 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_1\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mandola's\");",
									"    pm.expect(pm.response.json()[\"street_address\"]).to.eq(\"4900 N Lamar Blvd\");",
									"    pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(pm.response.json()[\"zip_code\"]).to.eq(78751);",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. add second business 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mandola's\");",
									"    pm.expect(pm.response.json()[\"street_address\"]).to.eq(\"321 South Mopac\");",
									"    pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(pm.response.json()[\"zip_code\"]).to.eq(78751);",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. add review business 1 user 1 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"reivew_id_1\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_1\")));",
									"    pm.expect(pm.response.json()[\"business_id\"]).to.eq(",
									"        pm.environment.get(\"business_id_1\"));",
									"    pm.expect(pm.response.json()[\"stars\"]).to.eq(4);",
									"    pm.expect(pm.response.json()[\"review_text\"]).to.eq(\"Excellent tacos!\");",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_1}},\r\n  \"business_id\": {{business_id_1}},\r\n  \"stars\": 4,\r\n  \"review_text\": \"Excellent tacos!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. add review business 2 user 1 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"reivew_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_1\")));",
									"    pm.expect(pm.response.json()[\"business_id\"]).to.eq(",
									"        pm.environment.get(\"business_id_2\"));",
									"    pm.expect(pm.response.json()[\"stars\"]).to.eq(4);",
									"    pm.expect(pm.response.json()[\"review_text\"]).to.eq(\"Excellent queso!\");",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_1}},\r\n  \"business_id\": {{business_id_2}},\r\n  \"stars\": 4,\r\n  \"review_text\": \"Excellent queso!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. add review business 2 user 2 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"reivew_id_3\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_2\")));",
									"    pm.expect(pm.response.json()[\"business_id\"]).to.eq(",
									"        pm.environment.get(\"business_id_2\"));",
									"    pm.expect(pm.response.json()[\"stars\"]).to.eq(4);",
									"    pm.expect(pm.response.json()[\"review_text\"]).to.eq(\"Excellent queso!\");",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_2}},\r\n  \"business_id\": {{business_id_2}},\r\n  \"stars\": 4,\r\n  \"review_text\": \"Excellent queso!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. get reviews for user 1 (6 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.5;\r",
									"}); \r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"const reviews = pm.response.json().length;\r",
									"const reviews_for_owner = pm.response.json().filter((b) => b.user_id === parseInt(pm.environment.get(\"user_id_1\"))).length;\r",
									"\r",
									"pm.test(\"All reviews are for user_id_1\", function() {\r",
									"    pm.expect(reviews).to.eql(reviews_for_owner);\r",
									"    points += 2.5;\r",
									"});\r",
									"\r",
									"pm.test(\"At least 2 reviews for user_id_1 exist\", function(){\r",
									"   pm.expect(pm.response.json().filter((b) => b.user_id === parseInt(pm.environment.get(\"user_id_1\"))).length).to.be.at.least(2);\r",
									"   points += 2.5;\r",
									"});\r",
									"\r",
									"console.log('******* List all reviews for user Test 6 points = ' + points);\r",
									"pm.environment.set(\"points_list_reviews\", points);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/users/{{user_id_1}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users",
								"{{user_id_1}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. delete business 204 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. delete second business 204 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('1. Create a business (max 6)         = ' + pm.environment.get('points_business_create'));",
									"console.log('2. Get a business (max 6)            = ' + pm.environment.get('points_business_get'));",
									"console.log('3. List all businesses (max 6)       = ' + pm.environment.get('points_business_list_all'));",
									"console.log('4. Edit a business (max 6)           = ' + pm.environment.get('points_business_edit'));",
									"console.log('5. Delete a business (max 6)         = ' + pm.environment.get('points_business_delete'));",
									"console.log('6. List businesses for owner (max 6) = ' + pm.environment.get('points_list_businesses'));",
									"console.log('7. Create a review (max 8)           = ' + pm.environment.get('points_review_create'));",
									"console.log('8. Get a review (max 5)              = ' + pm.environment.get('points_review_get'));",
									"console.log('9. Edit a review (max 6)             = ' + pm.environment.get('points_review_edit'));",
									"console.log('10. Delete a review (max 5)          = ' + pm.environment.get('points_review_delete'));",
									"console.log('11. List all review for user (max 6) = ' + pm.environment.get('points_list_reviews'));",
									"",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"",
									"let total_points = pm.environment.get(\"points_business_create\")",
									"                    + pm.environment.get(\"points_business_get\")",
									"                    + pm.environment.get(\"points_business_list_all\")",
									"                    + pm.environment.get(\"points_business_edit\")",
									"                    + pm.environment.get(\"points_business_delete\")",
									"                    + pm.environment.get(\"points_list_businesses\")",
									"                    + pm.environment.get(\"points_review_create\")",
									"                    + pm.environment.get(\"points_review_get\")",
									"                    + pm.environment.get(\"points_review_edit\")",
									"                    + pm.environment.get(\"points_review_delete\")",
									"                    + pm.environment.get(\"points_list_reviews\");",
									"",
									"console.log('Total points for the assignment (max 66) = ' + total_points);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_2}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}